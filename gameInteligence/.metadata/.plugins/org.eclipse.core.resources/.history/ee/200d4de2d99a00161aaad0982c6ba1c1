package views;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.border.Border;

public class WindowGame extends JFrame {

	private static final long serialVersionUID = 1L;
	private JButton btnHero;
	private boolean play;
	private int seconds, areaSize;
	private Timer timerEnemies;
	private Timer timerClock;
	private JLabel lblLeft, lblRigth, lblCenter, lblClock;
	private boolean colisionRigth,colisionLeft;
	private int yEnemieLeft, yEnemieRigth;
	private Border border;

	public WindowGame() {
		setLayout(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		// setExtendedState(MAXIMIZED_BOTH);
		setSize(1350, 730);
		setLocationRelativeTo(null);
		setTitle("Game");
		getContentPane().setBackground(Color.WHITE);
		btnHero = new JButton("H");
		add(btnHero);
		lblCenter = new JLabel("");
		lblLeft = new JLabel("");
		lblRigth = new JLabel("");
		lblClock = new JLabel("");
		add(lblCenter);
		add(lblRigth);
		add(lblLeft);
		lblClock.setBounds(10, 10, 200, 100);
		lblClock.setFont(new Font("Arial", Font.PLAIN, 22));
		add(lblClock);
		setVisible(true);
	}

	public void init(int areaSize) {
		this.areaSize = areaSize;
		colisionRigth=false;
		colisionLeft=false;
		yEnemieLeft = 0;
		yEnemieRigth = 0;
		play = true;
		btnHero.setBounds(getWidth() / 2, getHeight() - 100, 50, 50);
		generateAreas();
		generateEnemies();
		moveEnemiesDown();
		moveHero();
		verifyAreaLeft();
		verifyAreaRigth();
		refreshClock();
	}

	/**
	 * actualiza la posición de las áreas de visión con respecto a la posición del heroe 
	 */
	private void generateAreas() {
		lblCenter.setBounds(btnHero.getX(), btnHero.getY() - this.areaSize, btnHero.getWidth(), this.areaSize);
		border = BorderFactory.createLineBorder(Color.BLUE, 2);
		lblCenter.setBorder(border);

		lblLeft.setBounds(this.lblCenter.getX() - this.lblCenter.getWidth(), btnHero.getY() - this.areaSize,
				btnHero.getWidth(), this.areaSize + btnHero.getHeight());
		border = BorderFactory.createLineBorder(Color.BLUE, 2);
		lblLeft.setBorder(border);

		lblRigth.setBounds(this.lblCenter.getX() + this.lblCenter.getWidth(), btnHero.getY() - this.areaSize,
				btnHero.getWidth(), this.areaSize + btnHero.getHeight());
		border = BorderFactory.createLineBorder(Color.BLUE, 2);
		lblRigth.setBorder(border);

		repaint();
	}

	public boolean moveToRigth() {
		if (btnHero.getX() + 10 < getWidth()) {
			btnHero.setLocation(new Point(lblRigth.getX(), btnHero.getY()));
			generateAreas();
			repaint();
			return true;
		} else{
			return false;
		}
	}

	public boolean moveToLeft() {
		if (btnHero.getX() - 10 > 0) {
			btnHero.setLocation(new Point(lblLeft.getX(), btnHero.getY()));
			generateAreas();
			repaint();
			return true;
		}else{
			return false;
		}
	}

	public void moveEnemiesDown() {
		Thread thread = new Thread(new Runnable() {
			public void run() {
				while (play) {
					for (Component component : getContentPane().getComponents()) {
						if (component instanceof JButton) {
							JButton btnEnemie = (JButton) component;
							if (btnEnemie.getText().equals("X")) {
								if (btnEnemie.getY() > getHeight()) {
									getContentPane().remove(component);									
									repaint();
									break;
								} else {
									btnEnemie.setLocation(new Point(btnEnemie.getX(), btnEnemie.getY() + 10));
									if (btnEnemie.getBounds().intersects(btnHero.getBounds())) {
										gameOver();
									}
									repaint();
								}
							}
						}
					}
					try {
						Thread.sleep(500);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

			}
		});
		thread.start();
	}
	
	/**
	 * verifica cando exista una colision en el area de vision de la izquierda, con la finalidad
	 * de conocer el estado de las colisiones en esta area 
	 */
	private void verifyAreaLeft(){
		Thread thread = new Thread(new Runnable() {
			public void run() {
				while (play) {
					int numEnemiesWithoutColision = 0;
					int componentesEnemies = 0;
					for (Component newcomponent : getContentPane().getComponents()) {
						if (newcomponent instanceof JButton) {
							JButton newbtnEnemie = (JButton) newcomponent;
							if (newbtnEnemie.getText().equals("X")) {
								componentesEnemies+=1;
								if (newbtnEnemie.getBounds().intersects(lblLeft.getBounds())) {
									border = BorderFactory.createLineBorder(Color.RED, 2);
									lblLeft.setBorder(border);
									colisionLeft=true;
									if(newbtnEnemie.getY()>yEnemieLeft)
										yEnemieLeft = newbtnEnemie.getY();									
									if(yEnemieLeft>=670)
										yEnemieLeft=0;
									if((yEnemieLeft>=500)&&(!colisionRigth)){
										moveToRigth();
									}																		
									//break;
								} else {
									numEnemiesWithoutColision+=1;
								}
							}
						}
					}
					if(numEnemiesWithoutColision==componentesEnemies){
						colisionLeft=false;
						yEnemieLeft=0;
						border = BorderFactory.createLineBorder(Color.BLUE, 2);
						lblLeft.setBorder(border);
					}
				}
			}
		});
		thread.start();
	}
	/**
	 * verifica cando exista una colision en el area de vision de la derecha, con la finalidad
	 * de conocer el estado de las colisiones en esta area 
	 */
	private void verifyAreaRigth(){
		Thread thread = new Thread(new Runnable() {
			public void run() {
				while (play) {
					int numEnemiesWithoutColision = 0;
					int componentesEnemies = 0;
					for (Component newcomponent : getContentPane().getComponents()) {
						if (newcomponent instanceof JButton) {
							JButton newbtnEnemie = (JButton) newcomponent;
							if (newbtnEnemie.getText().equals("X")) {
								componentesEnemies+=1;
								if (newbtnEnemie.getBounds().intersects(lblRigth.getBounds())) {
									border = BorderFactory.createLineBorder(Color.RED, 2);
									lblRigth.setBorder(border);
									colisionRigth=true;
									if(newbtnEnemie.getY()>yEnemieRigth)
										yEnemieRigth = newbtnEnemie.getY();									

									if(yEnemieRigth>=670)
										yEnemieRigth=0;
									if((yEnemieRigth>=500)&&(!colisionLeft)){
										moveToLeft();
									}
									//break;
								} else {
									numEnemiesWithoutColision+=1;
								}
							} 
						}
					}
					if(numEnemiesWithoutColision==componentesEnemies){
						colisionRigth=false;
						yEnemieRigth=0;
						border = BorderFactory.createLineBorder(Color.BLUE, 2);
						lblRigth.setBorder(border);
					}
				}
			}
		});
		thread.start();
	}
	
	/**
	 * método para verificar cuando existen colisiones en las areas de vision
	 * y tomar una decisión cuando existen multiples colisiones a partir de las posiciones de los enemigos
	 * @param btnEnemie
	 */
	private void executeMovement(JButton btnEnemie){
		if(!colisionLeft && !colisionRigth){
			if(!moveToRigth()){
				moveToLeft();
				moveToLeft();											
			}
		} else if(colisionLeft && !colisionRigth){
			if(!moveToRigth()){
				moveToLeft();
				moveToLeft();
			}
		} else if (!colisionLeft && colisionRigth){
			if(!moveToLeft()){
				moveToRigth();
				moveToRigth();
			}
		} else if (colisionLeft && colisionRigth){
//			System.out.println("en izquierda esta "+colisionLeft+" con: "+yEnemieLeft);
//			System.out.println("en derecha esta "+colisionRigth+" con: "+yEnemieRigth);
//			System.out.println("Y el del centro esta en y en "+btnEnemie.getY());
			if(btnEnemie.getY()>=yEnemieLeft && btnEnemie.getY()>=yEnemieRigth){
				if(yEnemieLeft>=yEnemieRigth){
					if(!moveToRigth()){
						moveToLeft();
						moveToLeft();
					}
				} else {
					if(!moveToLeft()){
						moveToRigth();
						moveToRigth();
					}
				}
			} else if(yEnemieLeft>=550 && yEnemieRigth>=550){
				System.out.println("me quedo quieto porque no puedo moverme a los lados");
			} else if(yEnemieLeft>=550 && yEnemieRigth<550){
				if(!moveToRigth()){
					moveToLeft();
					moveToLeft();
				}
			} else if(yEnemieRigth>=550 && yEnemieLeft<550){
				if(!moveToLeft()){
					moveToRigth();
					moveToRigth();
				}
			} else if(yEnemieRigth>yEnemieLeft){
				if(!moveToLeft()){
					moveToRigth();
					moveToRigth();
				}
			} else {
				if(!moveToLeft()){
					moveToRigth();
					moveToRigth();
				}
			}
		}
	}

	public void moveHero() {
		Thread thread = new Thread(new Runnable() {
			public void run() {
				while (play) {
					int numEnemiesWithoutColision = 0;
					int componentesEnemies = 0;
					for (Component component : getContentPane().getComponents()) {
						if (component instanceof JButton) {
							JButton btnEnemie = (JButton) component;
							if (btnEnemie.getText().equals("X")) {
								// Detectando colision con el area central								
								if (btnEnemie.getBounds().intersects(lblCenter.getBounds())) {
									border = BorderFactory.createLineBorder(Color.RED, 2);
									lblCenter.setBorder(border);
									executeMovement(btnEnemie);
									try {
										Thread.sleep(500);
									} catch (InterruptedException e) {
										e.printStackTrace();
									}
								} else {
									numEnemiesWithoutColision+=1;
								}
							}
						}						
					}
					if(numEnemiesWithoutColision==componentesEnemies){
						colisionRigth=false;
						border = BorderFactory.createLineBorder(Color.BLUE, 2);
						lblCenter.setBorder(border);
					}
				}

			}
		});
		thread.start();
	}

	private void gameOver() {
		play = false;
		timerClock.stop();
		timerEnemies.stop();
		JOptionPane.showMessageDialog(null, "Juego terminado");
	}

	public void addEnemie() {
		int x = (int) (Math.random() * getWidth() - 50);
		JButton btnEnemie = new JButton("X");
		btnEnemie.setBounds(x, 0, 50, 50);
		add(btnEnemie);
		getContentPane().repaint();
	}

	public void refreshClock() {
		timerClock = new Timer(1000, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				seconds++;
				lblClock.setText("Time: " + seconds + "s");
			}
		});
		timerClock.start();
	}

	public void generateEnemies() {
		timerEnemies = new Timer(1500, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				addEnemie();
			}
		});
		timerEnemies.start();
	}

	public static void main(String[] args) {
		WindowGame w = new WindowGame();
		w.init(150);
	}
}